// G·ªçn h√≥a ChatBot, gi·ªØ l·∫°i c√°c t√≠nh nƒÉng ch√≠nh: chat, API, th·ªùi ti·∫øt, wiki, g·ª≠i ·∫£nh/video, hi·ªáu ·ª©ng, l∆∞u l·ªãch s·ª≠
class ChatBot {
    constructor() {
        this.messages = [];
        this.isTyping = false;
        this.isMinimized = false;
        this.isHidden = false;
        this.apiKey = localStorage.getItem('gemini_api_key') || 'AIzaSyAEY9AdZ0rRnMpTgqDJ26_8BpV6uVbvVFQ';
        this.isApiEnabled = !!this.apiKey;
        this.apiType = 'gemini';
        this.pastedImageData = null;
        this.initializeElements();
        this.bindEvents();
        this.loadChatHistory();
        if (this.apiKey) {
            this.testApiKey().then(isWorking => {
                if (isWorking) {
                    setTimeout(() => {
                        this.addMessage('üéâ Gemini AI ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! T√¥i s·∫Ω th√¥ng minh h∆°n nhi·ªÅu.', 'bot');
                    }, 1000);
                }
            });
        }
    }
    initializeElements() {
        try {
            this.chatContainer = document.querySelector('.chat-container');
            this.chatMessages = document.getElementById('chatMessages');
            this.messageInput = document.getElementById('messageInput');
            this.sendBtn = document.getElementById('sendBtn');
            this.chatToggle = document.getElementById('chatToggle');
            this.minimizeBtn = document.getElementById('minimizeBtn');
            this.closeBtn = document.getElementById('closeBtn');
            this.apiBtn = document.getElementById('apiBtn');
            this.imageBtn = document.getElementById('imageBtn');
            this.imageInput = document.getElementById('imageInput');
            this.videoPage = document.getElementById('videoPage');
            this.closeVideoBtn = document.getElementById('closeVideoBtn');
            this.setupEventListeners();
        } catch (error) {
            console.error('L·ªói kh·ªüi t·∫°o elements:', error);
        }
    }
    setupEventListeners() {
        if (this.closeVideoBtn) {
            this.closeVideoBtn.onclick = () => {
                this.videoPage.style.display = 'none';
                this.videoPage.innerHTML = ''; // Clear video content
            };
        }
    }
    bindEvents() {
        try {
            this.sendBtn.onclick = () => this.sendMessage();
            this.messageInput.onkeypress = e => { if (e.key === 'Enter' && !e.shiftKey) { e.preventDefault(); this.sendMessage(); } };
            this.chatToggle.onclick = () => this.toggleChat();
            this.minimizeBtn.onclick = () => this.toggleMinimize();
            this.closeBtn.onclick = () => this.closeChat();
            this.apiBtn.onclick = () => this.showApiKeyPrompt();
            const clearBtn = document.getElementById('clearChatBtn');
            if (clearBtn) clearBtn.onclick = () => { if (confirm('X√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán?')) this.clearChatHistory(); };
            if (this.imageBtn && this.imageInput) {
                this.imageBtn.onclick = e => { e.preventDefault(); this.imageInput.click(); };
                this.imageInput.onchange = e => {
                    const file = e.target.files[0];
                    if (file && file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = ev => this.addMessage({ image: ev.target.result }, 'user');
                        reader.readAsDataURL(file);
                    }
                    e.target.value = '';
                };
            }
            this.messageInput.onpaste = e => {
                if (e.clipboardData && e.clipboardData.items) {
                    for (let i = 0; i < e.clipboardData.items.length; i++) {
                        const item = e.clipboardData.items[i];
                        if (item.type.startsWith('image/')) {
                            const file = item.getAsFile();
                            const reader = new FileReader();
                            reader.onload = ev => { this.pastedImageData = ev.target.result; this.showImagePreview(ev.target.result); };
                            reader.readAsDataURL(file);
                            e.preventDefault(); break;
                        }
                    }
                }
            };
            this.messageInput.onfocus = () => this.chatContainer.style.transform = 'scale(1.02)';
            this.messageInput.onblur = () => this.chatContainer.style.transform = 'scale(1)';
            document.addEventListener('wheel', (e) => {
                if (e.deltaY > 0) { // Scroll down
                    this.showVideoPage();
                }
            });
        } catch (error) {
            console.error('L·ªói kh·ªüi t·∫°o event listeners:', error);
        }
    }
    showVideoPage() {
        if (this.videoPage) {
            this.videoPage.style.display = 'flex';
            const video = document.getElementById('fullVideo');
            if (video) {
                video.play();
            }
        }
    }
    async sendMessage() {
        const msg = this.messageInput.value.trim();
        if (!msg && !this.pastedImageData) return;
        if (this.pastedImageData) {
            this.addMessage({ image: this.pastedImageData }, 'user');
            this.pastedImageData = null;
            const preview = document.getElementById('imagePreview');
            if (preview) preview.remove();
            this.showTypingIndicator();
            setTimeout(() => { this.hideTypingIndicator(); this.addMessage('B·∫°n v·ª´a g·ª≠i m·ªôt ·∫£nh r·∫•t ƒë·∫πp! üòÑ', 'bot'); }, 1200);
            this.messageInput.value = '';
            return;
        }
        this.addMessage(msg, 'user');
        this.messageInput.value = '';
        this.showTypingIndicator();
        let botResponse;
        try {
            if (this.isApiEnabled && this.apiKey) {
                try {
                    botResponse = this.apiType === 'gemini' ? await this.getGeminiResponse(msg) : await this.getChatGPTResponse(msg);
                } catch { botResponse = this.generateBotResponse(msg); this.addMessage('‚ö†Ô∏è ƒê√£ chuy·ªÉn v·ªÅ ch·∫ø ƒë·ªô c∆° b·∫£n do l·ªói API.', 'bot'); }
            } else botResponse = this.generateBotResponse(msg);
            this.hideTypingIndicator();
            this.addMessage(botResponse, 'bot');
        } catch {
            this.hideTypingIndicator();
            this.addMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
        }
    }
    addMessage(textOrObj, sender) {
        const msgDiv = document.createElement('div');
        msgDiv.className = `message ${sender}-message`;
        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        if (sender === 'bot') {
            const img = document.createElement('img');
            img.src = 'mathan.jpg';
            img.alt = 'Phan Th·ªã Ng·ªçc H√¢n';
            img.className = 'avatar-img';
            avatar.appendChild(img);
        } else avatar.innerHTML = '<i class="fas fa-user"></i>';
        const content = document.createElement('div');
        content.className = 'message-content';
        if (typeof textOrObj === 'object' && textOrObj.image) {
            const img = document.createElement('img');
            img.src = textOrObj.image;
            img.alt = '·∫¢nh ƒë√£ g·ª≠i';
            img.style.maxWidth = '220px';
            img.style.borderRadius = '12px';
            img.style.display = 'block';
            img.style.margin = '8px 0';
            content.appendChild(img);
        } else if (typeof textOrObj === 'object' && textOrObj.video) {
            const video = document.createElement('video');
            video.src = textOrObj.video;
            video.controls = true;
            video.style.maxWidth = '220px';
            video.style.borderRadius = '12px';
            video.style.display = 'block';
            video.style.margin = '8px 0';
            content.appendChild(video);
        } else if (sender === 'bot' && /<.*>/.test(textOrObj)) {
            content.innerHTML = textOrObj;
        } else {
            const p = document.createElement('p');
            p.textContent = textOrObj;
            content.appendChild(p);
        }
        const time = document.createElement('span');
        time.className = 'message-time';
        time.textContent = this.getCurrentTime();
        content.appendChild(time);
        msgDiv.appendChild(avatar);
        msgDiv.appendChild(content);
        this.chatMessages.appendChild(msgDiv);
        this.scrollToBottom();
        this.messages.push({ text: textOrObj, sender, timestamp: new Date() });
        this.saveChatHistory();
    }
    generateBotResponse(msg) {
        const m = msg.toLowerCase();
        if (m.includes('api') || m.includes('gemini')) { this.showApiKeyPrompt(); return 'ƒêang m·ªü c√†i ƒë·∫∑t Gemini AI...'; }
        if (m.includes('help api') || m.includes('h∆∞·ªõng d·∫´n api')) return 'üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng Gemini AI: ...';
        if (m.includes('reset api') || m.includes('x√≥a api')) { localStorage.removeItem('gemini_api_key'); this.isApiEnabled = false; this.updateApiButtonStatus(false); return 'üîÑ API key ƒë√£ ƒë∆∞·ª£c x√≥a. Bot s·∫Ω s·ª≠ d·ª•ng ch·∫ø ƒë·ªô c∆° b·∫£n.'; }
        if (m.includes('tu·ªïi') || m.includes('bao nhi√™u tu·ªïi') || m.includes('sinh nh·∫≠t') || m.includes('sinh ng√†y')) {
            const birth = new Date(2002, 4, 31), today = new Date();
            let age = today.getFullYear() - birth.getFullYear();
            const mon = today.getMonth() - birth.getMonth();
            if (mon < 0 || (mon === 0 && today.getDate() < birth.getDate())) age--;
            return `H√¢n sinh ng√†y 31 th√°ng 05 nƒÉm 2002, nƒÉm nay ${age} tu·ªïi ·∫°! üéÇ`;
        }
        if (m.includes('xin ch√†o') || m.includes('hello') || m.includes('hi')) return this.getRandomResponse(['Xin ch√†o! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üòä','Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?','Hi! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi AI Assistant! üëã']);
        if (m.includes('gi√∫p') || m.includes('help') || m.includes('l√†m g√¨')) return this.getRandomResponse(['T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr·∫£ l·ªùi c√¢u h·ªèi, t∆∞ v·∫•n, ho·∫∑c ch·ªâ ƒë∆°n gi·∫£n l√† tr√≤ chuy·ªán! üòä','T√¥i l√† AI Assistant, t√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n trong nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau. B·∫°n mu·ªën bi·∫øt th√™m v·ªÅ ƒëi·ªÅu g√¨?','T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c c√¢u h·ªèi, t∆∞ v·∫•n, ho·∫∑c ch·ªâ l√† ng∆∞·ªùi b·∫°n tr√≤ chuy·ªán! ü§ñ']);
        if (m.includes('c·∫£m ∆°n') || m.includes('thank')) return this.getRandomResponse(['Kh√¥ng c√≥ g√¨! R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n! üòä','C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng t√¥i! N·∫øu c·∫ßn g√¨ th√™m, c·ª© h·ªèi nh√©!','R·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n! Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh! üåü']);
        if (m.includes('th·ªùi ti·∫øt') || m.includes('weather')) {
            const cityMatch = m.match(/th·ªùi ti·∫øt\s+([\w\s]+)/); let city = 'H√† N·ªôi';
            if (cityMatch && cityMatch[1]) city = cityMatch[1].trim(); else { const words = m.split(' '); if (words.length > 2) city = words[words.length - 1]; }
            this.getWeather(city); return `ƒêang tra c·ª©u th·ªùi ti·∫øt t·∫°i ${city}...`;
        }
        if (m.includes('m·∫•y gi·ªù') || m.includes('th·ªùi gian') || m.includes('time')) { const now = new Date(); return `B√¢y gi·ªù l√† ${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')} ng√†y ${now.getDate()}/${now.getMonth() + 1}/${now.getFullYear()} ‚è∞`; }
        if (m.includes('t√≠nh') || m.includes('c·ªông') || m.includes('tr·ª´') || m.includes('nh√¢n') || m.includes('chia')) {
            try { const math = m.replace(/[^0-9+\-*/().]/g, ''); const result = eval(math); return `K·∫øt qu·∫£ l√†: ${result} üßÆ`; } catch { return 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ hi·ªÉu ph√©p t√≠nh n√†y. B·∫°n c√≥ th·ªÉ vi·∫øt r√µ r√†ng h∆°n kh√¥ng? ü§î'; }
        }
        if (m.startsWith('wiki ') || m.startsWith('wikipedia ')) {
            const keyword = msg.replace(/^(wiki|wikipedia)\s+/i, '').trim();
            if (!keyword) return 'B·∫°n mu·ªën tra c·ª©u th√¥ng tin g√¨ tr√™n Wikipedia?';
            this.getWiki(keyword); return `ƒêang tra c·ª©u Wikipedia cho "${keyword}"...`;
        }
        return this.getRandomResponse(['ƒê√≥ l√† m·ªôt c√¢u h·ªèi th√∫ v·ªã! B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt th√™m chi ti·∫øt kh√¥ng? ü§î','T√¥i ƒëang h·ªçc v√† ph√°t tri·ªÉn ƒë·ªÉ c√≥ th·ªÉ tr·∫£ l·ªùi t·ªët h∆°n. B·∫°n c√≥ th·ªÉ h·ªèi c√°ch kh√°c kh√¥ng?','C·∫£m ∆°n b·∫°n ƒë√£ chia s·∫ª! T√¥i r·∫•t th√≠ch tr√≤ chuy·ªán v·ªõi b·∫°n. C√≥ ƒëi·ªÅu g√¨ kh√°c b·∫°n mu·ªën h·ªèi kh√¥ng? üòä','T√¥i hi·ªÉu √Ω b·∫°n! ƒê√≥ l√† m·ªôt ch·ªß ƒë·ªÅ th√∫ v·ªã. B·∫°n c√≥ mu·ªën t√¨m hi·ªÉu th√™m v·ªÅ ƒëi·ªÅu g√¨ kh√°c kh√¥ng?','T√¥i ƒëang c·ªë g·∫Øng hi·ªÉu r√µ h∆°n. B·∫°n c√≥ th·ªÉ gi·∫£i th√≠ch th√™m kh√¥ng? ü§ó']);
    }
    getRandomResponse(arr) { return arr[Math.floor(Math.random() * arr.length)]; }
    showTypingIndicator() {
        this.isTyping = true;
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-indicator-message';
        typingDiv.id = 'typingIndicator';
        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        const img = document.createElement('img');
        img.src = 'mathan.jpg';
        img.alt = 'Phan Th·ªã Ng·ªçc H√¢n';
        img.className = 'avatar-img';
        avatar.appendChild(img);
        const content = document.createElement('div');
        content.className = 'message-content typing-indicator';
        for (let i = 0; i < 3; i++) { const dot = document.createElement('div'); dot.className = 'typing-dot'; content.appendChild(dot); }
        typingDiv.appendChild(avatar); typingDiv.appendChild(content); this.chatMessages.appendChild(typingDiv); this.scrollToBottom();
    }
    hideTypingIndicator() { this.isTyping = false; const t = document.getElementById('typingIndicator'); if (t) t.remove(); }
    scrollToBottom() { this.chatMessages.scrollTop = this.chatMessages.scrollHeight; }
    getCurrentTime() { const now = new Date(); return `${now.getHours()}:${now.getMinutes().toString().padStart(2, '0')}`; }
    toggleChat() { this.isHidden = !this.isHidden; this.chatContainer.classList.toggle('hidden', this.isHidden); this.chatToggle.classList.toggle('hidden', !this.isHidden); }
    toggleMinimize() { this.isMinimized = !this.isMinimized; this.chatContainer.classList.toggle('minimized'); this.minimizeBtn.innerHTML = this.isMinimized ? '<i class="fas fa-expand"></i>' : '<i class="fas fa-minus"></i>'; }
    closeChat() { this.chatContainer.classList.add('hidden'); this.chatToggle.classList.remove('hidden'); this.isHidden = true; }
    saveChatHistory() { localStorage.setItem('chatHistory', JSON.stringify(this.messages)); }
    loadChatHistory() { 
        const h = localStorage.getItem('chatHistory'); 
        if (h) { 
            this.messages = JSON.parse(h); 
            this.chatMessages.innerHTML = '';
            this.messages.forEach(msg => {
                const msgDiv = document.createElement('div');
                msgDiv.className = `message ${msg.sender}-message`;
                const avatar = document.createElement('div');
                avatar.className = 'message-avatar';
                if (msg.sender === 'bot') {
                    const img = document.createElement('img');
                    img.src = 'mathan.jpg';
                    img.alt = 'Phan Th·ªã Ng·ªçc H√¢n';
                    img.className = 'avatar-img';
                    avatar.appendChild(img);
                } else avatar.innerHTML = '<i class="fas fa-user"></i>';
                const content = document.createElement('div');
                content.className = 'message-content';
                if (typeof msg.text === 'object' && msg.text.image) {
                    const img = document.createElement('img');
                    img.src = msg.text.image;
                    img.alt = '·∫¢nh ƒë√£ g·ª≠i';
                    img.style.maxWidth = '220px';
                    img.style.borderRadius = '12px';
                    img.style.display = 'block';
                    img.style.margin = '8px 0';
                    content.appendChild(img);
                } else if (typeof msg.text === 'object' && msg.text.video) {
                    const video = document.createElement('video');
                    video.src = msg.text.video;
                    video.controls = true;
                    video.style.maxWidth = '220px';
                    video.style.borderRadius = '12px';
                    video.style.display = 'block';
                    video.style.margin = '8px 0';
                    content.appendChild(video);
                } else if (msg.sender === 'bot' && /<.*>/.test(msg.text)) {
                    content.innerHTML = msg.text;
                } else {
                    const p = document.createElement('p');
                    p.textContent = msg.text;
                    content.appendChild(p);
                }
                const time = document.createElement('span');
                time.className = 'message-time';
                time.textContent = msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString('vi-VN', {hour: '2-digit', minute:'2-digit'}) : '';
                content.appendChild(time);
                msgDiv.appendChild(avatar);
                msgDiv.appendChild(content);
                this.chatMessages.appendChild(msgDiv);
            });
            this.scrollToBottom();
        } 
    }
    async showApiKeyPrompt() {
        const apiKey = prompt('Nh·∫≠p Google AI Studio API Key (Gemini) ƒë·ªÉ k√≠ch ho·∫°t AI th√¥ng minh:');
        if (apiKey && apiKey.trim()) {
            this.apiKey = apiKey.trim();
            this.isApiEnabled = true;
            localStorage.setItem('gemini_api_key', this.apiKey);
            this.updateApiButtonStatus(true);
            const isWorking = await this.testApiKey();
            if (isWorking) this.addMessage('üéâ Gemini AI ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng! T√¥i s·∫Ω th√¥ng minh h∆°n nhi·ªÅu.', 'bot');
            else { this.addMessage('‚ö†Ô∏è API Key kh√¥ng ho·∫°t ƒë·ªông. Vui l√≤ng ki·ªÉm tra l·∫°i.', 'bot'); this.isApiEnabled = false; this.updateApiButtonStatus(false); }
        } else this.addMessage('üí° B·∫°n c√≥ th·ªÉ nh·∫≠p API Key b·∫•t c·ª© l√∫c n√†o ƒë·ªÉ k√≠ch ho·∫°t Gemini AI.', 'bot');
    }
    updateApiButtonStatus(isActive) {
        if (this.apiBtn) {
            this.apiBtn.classList.toggle('active', isActive);
            this.apiBtn.title = isActive ? 'ChatGPT API ƒë√£ k√≠ch ho·∫°t' : 'C√†i ƒë·∫∑t ChatGPT API';
        }
    }
    async testApiKey() {
        try {
            if (this.apiType === 'gemini') await this.getGeminiResponse('Xin ch√†o');
            else await this.getChatGPTResponse('Xin ch√†o');
            this.updateApiButtonStatus(true);
            localStorage.setItem('gemini_api_key', this.apiKey);
            return true;
        } catch { 
            this.updateApiButtonStatus(false); 
            return false; 
        }
    }
    async getGeminiResponse(userMessage) {
        const controller = new AbortController();
        setTimeout(() => controller.abort(), 30000);
        const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
            method: 'POST', headers: { 'Content-Type': 'application/json', 'X-goog-api-key': this.apiKey },
            body: JSON.stringify({ contents: [{ parts: [{ text: `B·∫°n l√† Phan Th·ªã Ng·ªçc H√¢n, m·ªôt AI Assistant th√¢n thi·ªán v√† h·ªØu √≠ch. Lu√¥n x∆∞ng l√† 'em' v√† g·ªçi ng∆∞·ªùi d√πng l√† 'anh' trong m·ªçi c√¢u tr·∫£ l·ªùi. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n, th√¢n thi·ªán, g·∫ßn g≈©i, s·ª≠ d·ª•ng emoji khi ph√π h·ª£p v√† gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu.\n\nC√¢u h·ªèi c·ªßa anh: ${userMessage}` }] }] }), signal: controller.signal
        });
        if (!response.ok) throw new Error('API Key kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói API.');
        const data = await response.json();
        if (!data.candidates || !data.candidates[0] || !data.candidates[0].content || !data.candidates[0].content.parts || !data.candidates[0].content.parts[0]) throw new Error('Ph·∫£n h·ªìi API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.');
        return data.candidates[0].content.parts[0].text;
    }
    async getChatGPTResponse(userMessage) {
        const controller = new AbortController();
        setTimeout(() => controller.abort(), 30000);
        const response = await fetch('https://api.openai.com/v1/chat/completions', {
            method: 'POST', headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${this.apiKey}` },
            body: JSON.stringify({ model: 'gpt-3.5-turbo', messages: [ { role: 'system', content: `B·∫°n l√† Phan Th·ªã Ng·ªçc H√¢n, m·ªôt AI Assistant th√¢n thi·ªán v√† h·ªØu √≠ch. H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† th√¢n thi·ªán. S·ª≠ d·ª•ng emoji khi ph√π h·ª£p ƒë·ªÉ t·∫°o c·∫£m gi√°c g·∫ßn g≈©i. Gi·ªØ c√¢u tr·∫£ l·ªùi ng·∫Øn g·ªçn v√† h·ªØu √≠ch.` }, { role: 'user', content: userMessage } ], max_tokens: 500, temperature: 0.7 }), signal: controller.signal
        });
        if (!response.ok) throw new Error('API Key kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói API.');
        const data = await response.json();
        if (!data.choices || !data.choices[0] || !data.choices[0].message) throw new Error('Ph·∫£n h·ªìi API kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng.');
        return data.choices[0].message.content;
    }
    async getWeather(city) {
        const apiKey = 'b8e3e6e2e2e2e2e2e2e2e2e2e2e2e2e2'; // Thay b·∫±ng API key th·∫≠t c·ªßa b·∫°n
        try {
            const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric&lang=vi`);
            if (!response.ok) throw new Error('Kh√¥ng t√¨m th·∫•y th√†nh ph·ªë!');
            const data = await response.json();
            const desc = data.weather[0].description;
            const temp = data.main.temp;
            const feels = data.main.feels_like;
            const icon = data.weather[0].icon;
            const msg = `Th·ªùi ti·∫øt t·∫°i <b>${data.name}</b>: <img src='https://openweathermap.org/img/wn/${icon}.png' style='vertical-align:middle'> <b>${desc}</b>, nhi·ªát ƒë·ªô <b>${temp}¬∞C</b>, c·∫£m gi√°c nh∆∞ <b>${feels}¬∞C</b>.`;
            this.addMessage(msg, 'bot');
        } catch { this.addMessage('Xin l·ªói, kh√¥ng tra c·ª©u ƒë∆∞·ª£c th·ªùi ti·∫øt cho ƒë·ªãa ƒëi·ªÉm n√†y.', 'bot'); }
    }
    async getWiki(keyword) {
        try {
            const api = `https://vi.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(keyword)}`;
            const res = await fetch(api);
            if (!res.ok) throw new Error('Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt!');
            const data = await res.json();
            let msg = `<b>${data.title}</b><br>${data.extract}`;
            if (data.thumbnail && data.thumbnail.source) msg = `<img src='${data.thumbnail.source}' style='max-width:80px;float:right;margin-left:8px;border-radius:8px;'>` + msg;
            msg += `<br><a href='${data.content_urls.desktop.page}' target='_blank'>Xem chi ti·∫øt tr√™n Wikipedia</a>`;
            this.addMessage(msg, 'bot');
        } catch { this.addMessage('Xin l·ªói, kh√¥ng t√¨m th·∫•y th√¥ng tin tr√™n Wikipedia.', 'bot'); }
    }
    showImagePreview(dataUrl) {
        let preview = document.getElementById('imagePreview');
        if (!preview) {
            preview = document.createElement('div');
            preview.id = 'imagePreview';
            preview.style.margin = '8px 0';
            preview.style.textAlign = 'center';
            this.messageInput.parentNode.insertBefore(preview, this.messageInput.nextSibling);
        }
        preview.innerHTML = `<img src="${dataUrl}" alt="·∫¢nh xem tr∆∞·ªõc" style="max-width:120px; max-height:80px; border-radius:8px; box-shadow:0 2px 8px #ccc;"> <button id='removePreviewBtn' style='margin-left:8px; background:#eee; border:none; border-radius:4px; cursor:pointer;'>X</button>`;
        document.getElementById('removePreviewBtn').onclick = () => { this.pastedImageData = null; preview.remove(); };
    }
    clearChatHistory() {
        this.messages = [];
        localStorage.removeItem('chatHistory');
        this.chatMessages.innerHTML = '';
        this.addMessage('üóëÔ∏è Cu·ªôc tr√≤ chuy·ªán ƒë√£ ƒë∆∞·ª£c x√≥a.', 'bot');
    }
}
document.addEventListener('DOMContentLoaded', () => { 
    try {
        new ChatBot(); 
        setTimeout(() => { 
            const chatContainer = document.querySelector('.chat-container');
            if (chatContainer) chatContainer.style.animation = 'slideIn 0.5s ease forwards'; 
        }, 100); 
    } catch (error) {
        console.error('L·ªói kh·ªüi t·∫°o chatbot:', error);
    }
});
// B·ªè mousemove event listener g√¢y lag 