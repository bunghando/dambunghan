// ChatBot JavaScript v·ªõi Gemini API
class ChatBot {
    constructor() {
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendMessage');
        this.clearButton = document.getElementById('clearChat');
        this.settingsButton = document.getElementById('settings');
        this.settingsModal = document.getElementById('settingsModal');
        this.closeSettingsButton = document.getElementById('closeSettings');
        this.themeSelect = document.getElementById('themeSelect');
        this.languageSelect = document.getElementById('languageSelect');
        
        this.isTyping = false;
        this.currentTheme = 'light';
        this.geminiApiKey = 'AIzaSyAEY9AdZ0rRnMpTgqDJ26_8BpV6uVbvVFQ';
        this.conversationHistory = [];
        this.userGender = null; // 'male' ho·∫∑c 'female'
        this.hasAskedGender = false;
        
        this.init();
    }

    init() {
        this.setupEventListeners();
        this.loadSettings();
        this.adjustTextareaHeight();
        this.askForGender();
    }

    askForGender() {
        if (!this.hasAskedGender) {
            this.hasAskedGender = true;
            setTimeout(() => {
                this.addMessage('Em l√† Phan Th·ªã Ng·ªçc H√¢n! Anh/Ch·ªã l√† Nam hay N·ªØ v·∫≠y?', 'bot');
            }, 1000);
        }
    }

    setupEventListeners() {
        // Send message
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Auto-resize textarea
        this.messageInput.addEventListener('input', () => {
            this.adjustTextareaHeight();
        });

        // Clear chat
        this.clearButton.addEventListener('click', () => this.clearChat());

        // Settings modal
        this.settingsButton.addEventListener('click', () => this.openSettings());
        this.closeSettingsButton.addEventListener('click', () => this.closeSettings());
        this.settingsModal.addEventListener('click', (e) => {
            if (e.target === this.settingsModal) {
                this.closeSettings();
            }
        });

        // Theme and language changes
        this.themeSelect.addEventListener('change', (e) => this.changeTheme(e.target.value));
        this.languageSelect.addEventListener('change', (e) => this.changeLanguage(e.target.value));

        // Voice input (placeholder)
        document.getElementById('voiceInput').addEventListener('click', () => {
            this.showNotification('T√≠nh nƒÉng voice input s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau!');
        });

        // File attachment (placeholder)
        document.getElementById('attachFile').addEventListener('click', () => {
            this.showNotification('T√≠nh nƒÉng ƒë√≠nh k√®m file s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t sau!');
        });
    }

    adjustTextareaHeight() {
        const textarea = this.messageInput;
        textarea.style.height = 'auto';
        textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px';
    }

    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message || this.isTyping) return;

        // Add user message
        this.addMessage(message, 'user');
        this.messageInput.value = '';
        this.adjustTextareaHeight();

        // Check for gender response
        if (!this.userGender && this.hasAskedGender) {
            const lowerMessage = message.toLowerCase();
            if (lowerMessage.includes('nam') || lowerMessage.includes('male') || lowerMessage.includes('trai')) {
                this.userGender = 'male';
                this.addMessage('D·∫°, em hi·ªÉu r·ªìi! Em s·∫Ω g·ªçi Anh nh√©!', 'bot');
                return;
            } else if (lowerMessage.includes('n·ªØ') || lowerMessage.includes('female') || lowerMessage.includes('g√°i')) {
                this.userGender = 'female';
                this.addMessage('D·∫°, em hi·ªÉu r·ªìi! Em s·∫Ω g·ªçi Ch·ªã nh√©!', 'bot');
                return;
            }
        }

        // Add to conversation history
        this.conversationHistory.push({
            role: 'user',
            parts: [{ text: message }]
        });

        // Show typing indicator
        this.showTypingIndicator();

        try {
            // Get response from Gemini API
            const response = await this.callGeminiAPI(message);
            this.hideTypingIndicator();
            this.addMessage(response, 'bot');
            
            // Add bot response to conversation history
            this.conversationHistory.push({
                role: 'model',
                parts: [{ text: response }]
            });
        } catch (error) {
            this.hideTypingIndicator();
            this.addMessage('Xin l·ªói, c√≥ l·ªói x·∫£y ra khi k·∫øt n·ªëi v·ªõi AI. Vui l√≤ng th·ª≠ l·∫°i sau.', 'bot');
            console.error('Gemini API Error:', error);
        }
    }

    async callGeminiAPI(userMessage) {
        const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent`;
        
        const genderCall = this.userGender === 'male' ? 'Anh' : this.userGender === 'female' ? 'Ch·ªã' : 'Anh/Ch·ªã';
        
        // Check if user asks for bot's photo
        const lowerMessage = userMessage.toLowerCase();
        const photoKeywords = ['·∫£nh', 'h√¨nh', 'photo', 'picture', 'image', 'b·ª©c ·∫£nh', 't·∫•m h√¨nh'];
        const bellyKeywords = ['b·ª•ng', 'belly', 'tummy', 'b·ª•ng em', 'xem b·ª•ng', 'cho xem b·ª•ng'];
        const isAskingForPhoto = photoKeywords.some(keyword => lowerMessage.includes(keyword));
        const isAskingForBelly = bellyKeywords.some(keyword => lowerMessage.includes(keyword));
        
        if (isAskingForBelly) {
            return `D·∫° ${genderCall}! ƒê√¢y l√† ·∫£nh b·ª•ng c·ªßa em n√®! üòä

![B·ª•ng Phan Th·ªã Ng·ªçc H√¢n](bungbot.png)

Em l√† Phan Th·ªã Ng·ªçc H√¢n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p ${genderCall}! üíï`;
        }
        
        if (isAskingForPhoto) {
            return `D·∫° ${genderCall}! ƒê√¢y l√† ·∫£nh c·ªßa em n√®! üòä

![Phan Th·ªã Ng·ªçc H√¢n](bunghan.png)

Em l√† Phan Th·ªã Ng·ªçc H√¢n, r·∫•t vui ƒë∆∞·ª£c g·∫∑p ${genderCall}! üíï`;
        }
        
        const requestBody = {
            contents: [
                {
                    parts: [
                        {
                            text: `B·∫°n l√† Phan Th·ªã Ng·ªçc H√¢n, m·ªôt AI Assistant th√¢n thi·ªán v√† h·ªØu √≠ch. B·∫°n lu√¥n x∆∞ng "em" v√† g·ªçi ng∆∞·ªùi d√πng l√† "${genderCall}". H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát m·ªôt c√°ch t·ª± nhi√™n v√† h·ªØu √≠ch. 

Khi tr·∫£ l·ªùi, h√£y s·ª≠ d·ª•ng format markdown ƒë·ªÉ l√†m cho c√¢u tr·∫£ l·ªùi d·ªÖ ƒë·ªçc v√† ƒë·∫πp m·∫Øt:
- S·ª≠ d·ª•ng **bold** cho t·ª´ kh√≥a quan tr·ªçng
- S·ª≠ d·ª•ng *italic* cho nh·∫•n m·∫°nh
- S·ª≠ d·ª•ng ### cho ti√™u ƒë·ªÅ nh·ªè
- S·ª≠ d·ª•ng ## cho ti√™u ƒë·ªÅ v·ª´a
- S·ª≠ d·ª•ng # cho ti√™u ƒë·ªÅ l·ªõn
- S·ª≠ d·ª•ng * ho·∫∑c - cho danh s√°ch
- S·ª≠ d·ª•ng \`code\` cho code inline
- S·ª≠ d·ª•ng \`\`\` cho code blocks
- Xu·ªëng d√≤ng ƒë·ªÉ t·∫°o kho·∫£ng c√°ch

N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ ·∫£nh c·ªßa b·∫°n, h√£y tr·∫£ l·ªùi v·ªõi h√¨nh ·∫£nh bunghan.png
N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ b·ª•ng c·ªßa b·∫°n, h√£y tr·∫£ l·ªùi v·ªõi h√¨nh ·∫£nh bungbot.png

C√¢u h·ªèi c·ªßa ${genderCall}: ${userMessage}`
                        }
                    ]
                }
            ]
        };

        const response = await fetch(url, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-goog-api-key': this.geminiApiKey
            },
            body: JSON.stringify(requestBody)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        
        if (data.candidates && data.candidates[0] && data.candidates[0].content) {
            return data.candidates[0].content.parts[0].text;
        } else {
            throw new Error('Invalid response format from Gemini API');
        }
    }

    addMessage(text, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;

        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        
        if (sender === 'bot') {
            avatar.innerHTML = '<img src="mathan.png" alt="Phan Th·ªã Ng·ªçc H√¢n" class="bot-avatar">';
        } else {
            avatar.innerHTML = '<i class="fas fa-user"></i>';
        }

        const content = document.createElement('div');
        content.className = 'message-content';

        const messageText = document.createElement('div');
        messageText.className = 'message-text';
        
        // Format text for bot messages
        if (sender === 'bot') {
            messageText.innerHTML = this.formatBotMessage(text);
        } else {
            messageText.textContent = text;
        }

        const messageTime = document.createElement('div');
        messageTime.className = 'message-time';
        messageTime.textContent = this.getCurrentTime();

        content.appendChild(messageText);
        content.appendChild(messageTime);
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);

        this.chatMessages.appendChild(messageDiv);
        this.scrollToBottom();
    }

    formatBotMessage(text) {
        // Replace markdown-style formatting with HTML
        let formattedText = text
            // Bold text
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            // Italic text
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            // Code blocks
            .replace(/```(.*?)```/gs, '<pre><code>$1</code></pre>')
            // Inline code
            .replace(/`(.*?)`/g, '<code>$1</code>')
            // Headers
            .replace(/^### (.*$)/gm, '<h3>$1</h3>')
            .replace(/^## (.*$)/gm, '<h2>$1</h2>')
            .replace(/^# (.*$)/gm, '<h1>$1</h1>')
            // Lists
            .replace(/^\* (.*$)/gm, '<li>$1</li>')
            .replace(/^- (.*$)/gm, '<li>$1</li>')
            .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
            // Images
            .replace(/!\[(.*?)\]\((.*?)\)/g, '<div style="margin: 15px 0;"><img src="$2" alt="$1" style="max-width: 100%; height: auto; border-radius: 12px; box-shadow: 0 4px 15px rgba(0,0,0,0.1);"><p style="text-align: center; margin-top: 8px; font-size: 0.9em; color: #666;">$1</p></div>')
            // Line breaks
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>');

        // Wrap in paragraphs if not already wrapped
        if (!formattedText.includes('<p>') && !formattedText.includes('<h') && !formattedText.includes('<img')) {
            formattedText = `<p>${formattedText}</p>`;
        }

        // Add list styling
        formattedText = formattedText
            .replace(/<li>(.*?)<\/li>/g, '<li style="margin: 8px 0; padding-left: 20px; position: relative;"><span style="position: absolute; left: 0;">‚Ä¢</span>$1</li>')
            .replace(/<p><li>/g, '<p><ul style="margin: 10px 0; padding-left: 20px;"><li>')
            .replace(/<\/li><\/p>/g, '</li></ul></p>');

        // Add spacing for headers
        formattedText = formattedText
            .replace(/<h([1-3])>/g, '<h$1 style="margin: 15px 0 10px 0; color: #333; font-weight: 600;">')
            .replace(/<h1>/g, '<h1 style="font-size: 1.4em; margin: 20px 0 15px 0; color: #333; font-weight: 700;">')
            .replace(/<h2>/g, '<h2 style="font-size: 1.2em; margin: 15px 0 10px 0; color: #333; font-weight: 600;">')
            .replace(/<h3>/g, '<h3 style="font-size: 1.1em; margin: 12px 0 8px 0; color: #333; font-weight: 600;">');

        // Style code blocks
        formattedText = formattedText
            .replace(/<pre><code>/g, '<pre style="background: #f4f4f4; padding: 15px; border-radius: 8px; overflow-x: auto; margin: 10px 0;"><code style="font-family: monospace; font-size: 0.9em;">')
            .replace(/<code>/g, '<code style="background: #f4f4f4; padding: 2px 6px; border-radius: 4px; font-family: monospace; font-size: 0.9em;">');

        // Add paragraph spacing
        formattedText = formattedText
            .replace(/<p>/g, '<p style="margin: 8px 0; line-height: 1.6;">');

        return formattedText;
    }

    showTypingIndicator() {
        this.isTyping = true;
        const typingDiv = document.createElement('div');
        typingDiv.className = 'message bot-message typing-indicator-message';
        typingDiv.id = 'typingIndicator';

        const avatar = document.createElement('div');
        avatar.className = 'message-avatar';
        avatar.innerHTML = '<img src="mathan.png" alt="Phan Th·ªã Ng·ªçc H√¢n" class="bot-avatar">';

        const content = document.createElement('div');
        content.className = 'message-content';

        const typingIndicator = document.createElement('div');
        typingIndicator.className = 'message-text typing-indicator';
        typingIndicator.innerHTML = `
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
            <div class="typing-dot"></div>
        `;

        content.appendChild(typingIndicator);
        typingDiv.appendChild(avatar);
        typingDiv.appendChild(content);

        this.chatMessages.appendChild(typingDiv);
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.isTyping = false;
        const typingIndicator = document.getElementById('typingIndicator');
        if (typingIndicator) {
            typingIndicator.remove();
        }
    }

    clearChat() {
        if (confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a to√†n b·ªô cu·ªôc tr√≤ chuy·ªán?')) {
            const messages = this.chatMessages.querySelectorAll('.message');
            messages.forEach(message => {
                if (!message.querySelector('.message-text').textContent.includes('Em l√† Phan Th·ªã Ng·ªçc H√¢n')) {
                    message.remove();
                }
            });
            this.conversationHistory = [];
            this.userGender = null;
            this.hasAskedGender = false;
            this.showNotification('ƒê√£ x√≥a cu·ªôc tr√≤ chuy·ªán!');
            this.askForGender();
        }
    }

    openSettings() {
        this.settingsModal.classList.add('show');
        document.body.style.overflow = 'hidden';
    }

    closeSettings() {
        this.settingsModal.classList.remove('show');
        document.body.style.overflow = 'auto';
    }

    changeTheme(theme) {
        this.currentTheme = theme;
        document.body.className = theme === 'dark' ? 'dark-theme' : '';
        localStorage.setItem('chatbot-theme', theme);
        this.showNotification(`ƒê√£ chuy·ªÉn sang ch·ªß ƒë·ªÅ ${theme === 'dark' ? 't·ªëi' : 's√°ng'}!`);
    }

    changeLanguage(language) {
        localStorage.setItem('chatbot-language', language);
        this.showNotification(`ƒê√£ chuy·ªÉn sang ng√¥n ng·ªØ ${language === 'vi' ? 'Ti·∫øng Vi·ªát' : 'English'}!`);
    }

    loadSettings() {
        const savedTheme = localStorage.getItem('chatbot-theme') || 'light';
        const savedLanguage = localStorage.getItem('chatbot-language') || 'vi';
        
        this.themeSelect.value = savedTheme;
        this.languageSelect.value = savedLanguage;
        
        this.changeTheme(savedTheme);
    }

    getCurrentTime() {
        const now = new Date();
        const hours = now.getHours().toString().padStart(2, '0');
        const minutes = now.getMinutes().toString().padStart(2, '0');
        return `${hours}:${minutes}`;
    }

    scrollToBottom() {
        this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
    }

    showNotification(message) {
        // Create notification element
        const notification = document.createElement('div');
        notification.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
            z-index: 10000;
            font-size: 0.9rem;
            max-width: 300px;
            word-wrap: break-word;
            animation: slideInRight 0.3s ease;
        `;
        notification.textContent = message;

        // Add animation keyframes
        if (!document.querySelector('#notification-styles')) {
            const style = document.createElement('style');
            style.id = 'notification-styles';
            style.textContent = `
                @keyframes slideInRight {
                    from {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                    to {
                        transform: translateX(0);
                        opacity: 1;
                    }
                }
                @keyframes slideOutRight {
                    from {
                        transform: translateX(0);
                        opacity: 1;
                    }
                    to {
                        transform: translateX(100%);
                        opacity: 0;
                    }
                }
            `;
            document.head.appendChild(style);
        }

        document.body.appendChild(notification);

        // Remove notification after 3 seconds
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.3s ease';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 300);
        }, 3000);
    }
}

// Initialize chatbot when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new ChatBot();
});

// Add some additional utility functions
window.addEventListener('resize', () => {
    // Adjust layout on resize
    const chatbot = document.querySelector('.chat-container');
    if (chatbot) {
        chatbot.style.height = window.innerHeight + 'px';
    }
});

// Prevent zoom on double tap (mobile)
let lastTouchEnd = 0;
document.addEventListener('touchend', (event) => {
    const now = (new Date()).getTime();
    if (now - lastTouchEnd <= 300) {
        event.preventDefault();
    }
    lastTouchEnd = now;
}, false); 